@model ScrumTool.Database.ScrumTask

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>ScrumTask</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
            
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Weight, new { @class = "form-control", @id = "weight-box" })
                <input type="text" disabled="disabled" id="weight-display" class="form-control"/>
                <div id="weight-slider"></div>
                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
            </div>
        </div>
        

        <div class="form-group">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.BacklogItemID, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Back" onclick="window.history.back()" class="btn btn-default"/>
                <input type="submit" value="Save" class="btn btn-default btn-success"/>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    $(document).ready(function () {
        var weights = ["?", "0", "0.5", "1", "2", "3", "5", "8", "13", "21", "35", "50", "100", "∞"];

        var startValue = 0;
        switch (Number($("#weight-box").val())) {
            case -1:
                $("#weight-display").val("?");
                // start value = 0
                break;
            case 10000:
                $("#weight-display").val("∞");
                startValue = weights.length - 1;
                break;
            default:
                $("#weight-display").val($("#weight-box").val());
                startValue = weights.indexOf($("#weight-box").val());
                break;
        }

        $("#weight-slider").slider({
            min: 0,
            max: weights.length - 1,
            step: 1,
            value: startValue,
            slide: function (event, ui) {
                $("#weight-display").val(weights[ui.value]);
                switch(ui.value) {
                    case 0:
                        $("#weight-box").val("-1");
                        break;
                    case weights.length -1:
                        $("#weight-box").val("10000"); // 10000 = ∞
                        break;
                    default:
                        $("#weight-box").val(weights[ui.value]);
                        break;
                }
            }
        });
    });
</script>